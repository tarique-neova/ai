import subprocess
import json
import pandas as pd
import re
from transformers import pipeline
import os

# Initialize the Hugging Face model for text classification
nlu_model = pipeline("zero-shot-classification")


def docker_login(username, password):
    try:
        subprocess.run(["sudo", "docker", "login", "--username", username, "--password", password], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error occurred while logging in to Docker Hub: {e}")
        return False
    return True


def scan_docker_image(image_name):
    try:
        # Pull the Docker image using sudo
        subprocess.run(["sudo", "docker", "pull", image_name], check=True)

        # Scan the Docker image using Trivy
        result = subprocess.run(["sudo", "trivy", "image", "--format", "json", image_name], capture_output=True,
                                text=True)

        # Parse the JSON output
        vulnerabilities = json.loads(result.stdout)

        return vulnerabilities
    except subprocess.CalledProcessError as e:
        print(f"Error occurred while pulling or scanning the Docker image: {e}")
        return None


def parse_vulnerabilities(vulnerabilities):
    # Extract relevant information and organize it into a list of dictionaries
    vulnerability_list = []

    for vuln in vulnerabilities.get('Results', []):
        for vulnerability in vuln.get('Vulnerabilities', []):
            vuln_info = {
                "Target": vuln.get("Target"),
                "VulnerabilityID": vulnerability.get("VulnerabilityID"),
                "PkgName": vulnerability.get("PkgName"),
                "InstalledVersion": vulnerability.get("InstalledVersion"),
                "FixedVersion": vulnerability.get("FixedVersion"),
                "Severity": vulnerability.get("Severity"),
                "Description": vulnerability.get("Description")
            }
            vulnerability_list.append(vuln_info)

    return vulnerability_list


def vulnerabilities_to_table(vulnerability_list):
    # Convert the list of dictionaries to a Pandas DataFrame
    df = pd.DataFrame(vulnerability_list)
    return df


def format_vulnerabilities_table_sql(df):
    if df.empty:
        return "No vulnerabilities found. Image is clean."

    # Calculate column widths
    col_widths = {col: max(len(col), df[col].astype(str).map(len).max()) for col in df.columns}

    # Create the header
    headers = df.columns.tolist()
    header_line = "| " + " | ".join(f"{header:{col_widths[header]}}" for header in headers) + " |"
    separator_line = "|" + "|".join("-" * (col_widths[header] + 2) for header in headers) + "|"

    # Create the data rows
    rows = []
    for _, row in df.iterrows():
        rows.append("| " + " | ".join(f"{str(cell):{col_widths[header]}}" for cell, header in zip(row, headers)) + " |")

    # Combine everything into a formatted string
    table = "\n".join([header_line, separator_line] + rows)

    return table


def extract_docker_image_name(command):
    # Use regex to find the Docker image name in the command
    match = re.search(r'image\s+([\w\-:./]+)', command, re.IGNORECASE)
    if not match:
        match = re.search(r'vulnerabilities\s+for\s+([\w\-:./]+)', command, re.IGNORECASE)
    if match:
        return match.group(1)
    else:
        return None


def main():
    # Login to Docker Hub
    username = os.getenv('DOCKER_USERNAME')
    password = os.getenv('DOCKER_PASSWORD')

    if not docker_login(username, password):
        print("Docker login failed. Exiting.")
        return

    # Get user's natural language command
    command = input("Enter your command: ")

    # Use the NLU model to classify the intent of the command
    classification = nlu_model(command, candidate_labels=["vulnerabilities"])

    # If the intent is related to vulnerabilities, extract the Docker image name
    if classification["labels"][0] == "vulnerabilities":
        image_name = extract_docker_image_name(command)
        image_name = image_name.rstrip('.')

        if not image_name:
            print("Unable to extract Docker image name from the command.")
            return

        vulnerabilities = scan_docker_image(image_name)
        if vulnerabilities:
            vulnerability_list = parse_vulnerabilities(vulnerabilities)
            if vulnerability_list:
                vulnerability_table = vulnerabilities_to_table(vulnerability_list)
                formatted_table = format_vulnerabilities_table_sql(vulnerability_table)
                print(formatted_table)
            else:
                print("No vulnerabilities found. Image is clean.")
        else:
            print("No vulnerabilities found or an error occurred.")
    else:
        print("The command does not seem to be related to vulnerabilities.")


if __name__ == "__main__":
    main()
